var Intro = {
    view: function() {
      return m('div', m('h1', m('a', 'Introduction')), m('p', "In a (hopefully) obvious move, this whole website's content was written using\n", m('strong', {}, 'GLUE'), ', as an attempt to show off what it can do. You can follow along with the\ninput text of each page in the ', m('a', {'href': 'https://github.com/vshesh/glue/tree/master/static/examples'}, 'examples directory'), '.'), m('h2', m('a', 'Why did you bother?')), m('p', 'I like Markdown a lot. It makes writing static documents a lot easier, esp. for people who have some experience writing code. I like using it for all kinds of tasks - homework write ups (which includes math and code), papers, web pages, presentations, educational content, personal blogs, and so on.'), m('p', 'However, Markdown is incredibly basic. I end up writing quite a bit of raw HTML in my markdown documents, mostly because of missing plugins/styling. Math is an excellent example. I have to write ', m('code', {}, '<div class="math"> [math here] </div>'), ' in my documents, and then add a script tag to include ', m('code', {}, 'katex'), ', which is really annoying. Another good example is images, which have no default styling, meaning I have to wrap them in another div and type the styling myself. Doing this for every image leads to lots of copy pasting, which is boring and a waste of time.'), m('p', "Markdown has also inspired many other plain text domain-specific languages. There's languages for ", m('a', {'href': 'http://abcnotation.com'}, 'sheet music'), ', ', m('a', {'href': 'http://knsv.github.io/mermaid/'}, 'flowcharts'), ', ', m('a', {'href': 'https://khan.github.io/KaTeX'}, 'math'), ', ', m('a', {'href': 'http://criticmarkup.com'}, 'critique'), ', and more out there. No way to include these into the original markdown syntax, unless the person writing your parser thought to include it in there. I always feel gimped when trying to express myself using Markdown - not everything is a list or a blockquote.'), m('p', "I also can write my own components (in a view library, say React or Mithril or Elm) and include them into the document. It's especially useful for static elements that need some interaction, like an image carousel, tooltip, slideshow, and so on. Again, no way to get Markdown of any kind to spit out a template useable by a view library as a page."), m('p', 'What I\'d like to be able to do is write my own extensions to Markdown and have them included into the syntax of my parser, with minimal fuss. There are some "extensible" markdown editors out there, but I couldn\'t make sense of how to extend them (and I don\'t use PHP or Ruby, which is what most of them seemed to be written in). On top of that, most of these "extensible" parsers required actually mucking around with the parser, which didn\'t seem very extensible to me. Their docs on extensions were always hidden somewhere in the back, as if the authors knew that the vast majority of their users wouldn\'t bother with it at all. For example, pandoc exposes a custom AST that isn\'t documented ', m('em', {}, 'anywhere!'), " Basically just have to guess what a particular element might look like. The filter paradigm also doesn't work if you want to actually include new ", m('em', {}, 'syntax'), ' into the document, rather than just reformatting existing known elements, like lists.'), m('p', 'I also noticed that many of these "extensions" required assets - small JS/CSS snippets - to be included so that they function properly, which makes them a lot like components in a real application, and no Markdown parser out there handled generating the proper kinds of header files (no, not even Pandoc), or embedding the mini-scripts needed to get everything working.'), m('h2', m('a', 'Ok, so how does GLUE help?')), m('p', m('strong', {}, 'GLUE'), ' is a combination of a few things:'), m('ul', m('li', m('strong', {}, 'CLI Parser'), ': the ability to read a file of text and convert it to:', m('ul', m('li', 'raw HTML'), m('li', 'Component in a known language (so far React/Mithril)'))), m('li', m('strong', {}, 'Library'), ': a bundle of ', m('code', {}, 'Element'), 's that comes built-in', m('ul', m('li', 'Of course, you can change any of the ', m('code', {}, 'Element'), 's to suit yourself.'), m('li', 'The library is divided into ', m('strong', {}, 'Registry'), 's, each of which house ', m('code', {}, 'Element'), 's for a particular domain. You can take only the ones you need to keep the parser fast.'))), m('li', m('strong', {}, 'Constructors'), ': a bundle of functions/decorators that make it really, really easy to build your own ', m('code', {}, 'Element'), 's.')), m('p', ' \nEach thing facilitates one major use case of ', m('strong', {}, 'GLUE'), '.'), m('h3', m('a', 'Use case 1: Parse some text')), m('p', 'For those of you who just want to use ', m('strong', {}, 'GLUE'), ' to write yourself some content -'), m('pre', m('code#b5a7dcab-b2d5-4b52-bf2d-deeb997f7ba3.language-bash', '$ cat your-file | python3 -m glue\n'), m('script', {'key': 'b5a7dcab-b2d5-4b52-bf2d-deeb997f7ba3'}, "hljs.highlightBlock(document.getElementById('b5a7dcab-b2d5-4b52-bf2d-deeb997f7ba3'))")), m('p', '\nWill spit out html!'), m('p', 'Sometimes, you need a template - I have support for react and mithril templates, so far:'), m('pre', m('code#9bdae818-5725-4556-a99f-e0d362c7dd78.language-bash', '$ cat your-file | python3 -m glue -l [mithril|react] ComponentName\n'), m('script', {'key': '9bdae818-5725-4556-a99f-e0d362c7dd78'}, "hljs.highlightBlock(document.getElementById('9bdae818-5725-4556-a99f-e0d362c7dd78'))")), m('p', '\n', m('code', {}, '-l'), ' or ', m('code', {}, '--language'), ' both work. Now you will get a file that creates a component, which you can save as ', m('code', {}, 'component-name.js[x]'), '.'), m('p', 'This is a really bare bones intro - see the ', m('a', {'href': '/tour'}, 'Tour of the Standard Registry'), ' to learn more about what components are available to you to write your document.'), m('h3', m('a', 'Use case 2: Customize your bundle')), m('p', 'The ', m('code', {}, 'parser'), ' function asks you to provide an object called a ', m('code', {}, 'Registry'), ', which is just a fancy dictionary mapping name to ', m('code', {}, 'Element'), ' for all the elements that you want to include. You can always add, remove, or modify the elements in the ', m('code', {}, 'Registry'), " and customize what's possible."), m('h4', m('a', 'Edit a registry')), m('p', "Let's say you don't need/want ", m('a', {'href': 'http://criticmarkup.com'}, m('code', {}, 'CriticMarkup')), ". Maybe it's just not something you're going to use in your actual content writing, or maybe there will never be a reason to visualize an editing scenario. You can remove it easily with little fuss:"), m('pre', m('code#866c6dd0-2b97-4292-8b23-023d23f2ed05.language-python', "from glue.library import Standard, CriticMarkup\nfrom glue import parse\n\nnew_registry = Standard - CriticMarkup\nparse(new_registry, '*text*')\n# ['strong', {}, 'text']\n"), m('script', {'key': '866c6dd0-2b97-4292-8b23-023d23f2ed05'}, "hljs.highlightBlock(document.getElementById('866c6dd0-2b97-4292-8b23-023d23f2ed05'))")), m('h4', m('a', 'DSL bundle')), m('p', "Here's another example: say you want to use GLUE as a literate code parser.\nLet's say this is your python script:"), m('pre', m('code#446d077a-ed88-4817-b960-e5132cfe86e6.language-python', '# # Fibonacci Sequence\n# The fibonacci sequence is one of the most mysterious mathematical sequences ever discovered.\n# It seems to occur everywhere! Let\'s try and generate it here. The sequence is:\n# ---katex\n# 0,1,1,2,3,5,8,13,21,34,55,...\n# ...\n# You can see that each number is the sum of the two before it.\n\ndef fib(n):\n  """fibonacci sequence, naively implemented using recursion"""\n  if n == 0: return 0\n  if n == 1: return 1\n  return fib(n-1) + fib(n-2)\n\n# The recursive solution is slow O((n+1)n/2) ~ O(n^2)! How can we make it faster?\n\ndef fib2(n):\n  a = 0\n  b = 1\n  for i in range(n)\n    a,b = b,a+b\n  \n  return a\n\n# Yay, now it\'s O(n)!\n'), m('script', {'key': '446d077a-ed88-4817-b960-e5132cfe86e6'}, "hljs.highlightBlock(document.getElementById('446d077a-ed88-4817-b960-e5132cfe86e6'))")), m('p', "\nYou've done the wonderful job of including your docs in your code, and now you want to share that with everyone."), m('p', 'To make this possible, you write a small script which replaces the above with:'), m('pre', m('code#23680149-a613-4f66-8afd-d31fa0e0114c.language-md', '# Fibonacci Sequence\nThe fibonacci sequence is one of the most mysterious mathematical sequences ever discovered.\nIt seems to occur everywhere! Let\'s try and generate it here. The sequence is:\n---katex\n0,1,1,2,3,5,8,13,21,34,55,...\n...\nYou can see that each number is the sum of the two before it.\n\n---code python\ndef fib(n):\n  """fibonacci sequence, naively implemented using recursion"""\n  if n == 0: return 0\n  if n == 1: return 1\n  return fib(n-1) + fib(n-2)\n...\n\nThe recursive solution is slow O((n+1)n/2) ~ O(n^2)! How can we make it faster?\n\n---code python\ndef fib2(n):\n  a = 0\n  b = 1\n  for i in range(n)\n    a,b = b,a+b\n  \n  return a\n...\n\nYay, now it\'s O(n)!\n'), m('script', {'key': '23680149-a613-4f66-8afd-d31fa0e0114c'}, "hljs.highlightBlock(document.getElementById('23680149-a613-4f66-8afd-d31fa0e0114c'))")), m('p', "\nAnd now you want to pass this through GLUE to generate your final output. Clearly you don't need lots of stuff. Maybe just the standard inline styles (bold, underline, etc) and the ability to show math, and the ability to show code."), m('pre', m('code#d3189a89-61fd-4cf1-9d3a-b0bf21bc89c0.language-python', 'import glue.library as l\n\nmy_registry = l.StandardInline + [l.Katex, l.Code]\n'), m('script', {'key': 'd3189a89-61fd-4cf1-9d3a-b0bf21bc89c0'}, "hljs.highlightBlock(document.getElementById('d3189a89-61fd-4cf1-9d3a-b0bf21bc89c0'))")), m('p', '\nVoila! Super trim ', m('code', {}, 'Registry'), ' just for you!'), m('h4', m('a', 'Your own ', m('code', {}, 'Element'), 's')), m('p', '\nOf course, you can also extend a registry with your own ', m('code', {}, 'Element'), 's:'), m('pre', m('code#aa902db2-fb19-437f-b4c3-6c710b62509e.language-python', 'import glue.library\nimport elements as e\n\nmy_registry = glue.library.Standard + [e.FirstElement, e.SecondElement, ...]\n'), m('script', {'key': 'aa902db2-fb19-437f-b4c3-6c710b62509e'}, "hljs.highlightBlock(document.getElementById('aa902db2-fb19-437f-b4c3-6c710b62509e'))")), m('h3', m('a', 'Use case 3: Write an ', m('code', {}, 'Element'))), m('p', 'GLUE provides lots of support for you to write your own ', m('code', {}, 'Element'), ". However, it's more of an art than a science. In general, you have to decide a few things:"), m('ol', m('li', 'Do you want a ', m('code', {}, 'Block'), ' or an ', m('code', {}, 'Inline'), ' element? ', m('code', {}, 'Block'), 's look like HTML ', m('code', {}, 'div'), ' tags, and ', m('code', {}, 'Inline'), ' look like HTML ', m('code', {}, 'span'), ' tags.'), m('li', 'Is it possible to nest other ', m('code', {}, 'Element'), 's in your ', m('code', {}, 'Element'), '?', m('ol', m('li', 'If no, you want ', m('code', {}, 'Nesting.NONE'), ', or a ', m('code', {}, '@terminal_block'), '.'), m('li', 'If yes, then do you want assemble your ', m('code', {}, 'Element'), ' upfront (', m('code', {}, 'Nesting.POST'), '), or have GLUE first assemble the nested ', m('code', {}, 'Element'), 's (', m('code', {}, 'Nesting.SUB'), ')?'))), m('li', 'Are there any asset files (css/js) to be included with your ', m('code', {}, 'Element'), '?')), m('p', '\nThis is a super bare-bones intro to writing your own ', m('code', {}, 'Element'), '. If it seems like a lot of convoluted decisions, don\'t worry! There\'s a whole article on it called "', m('a', {'href': '/?/anatomy'}, 'Anatomy of an ', m('code', {}, 'Element'), '"'), ' that explains everything in detail. Most ', m('code', {}, 'Element'), 's fall into one of a few main buckets, and that article covers how to make each kind.'), m('h2', m('a', 'FAQ')), m('p'), m('h3', m('a', "Why is this in Python!? Wouldn't JS be more universal?")), m('p', "Frankly, JS drives me nuts. I am not a fan of working in JS, and I'm especially not a fan of debugging JS. Talk about nightmares."), m('p', 'Also, JS does not have the ability to handle complex regexes, including lookbehind, lookahead, and the ', m('code', {}, '\\K'), ' flag, which allows for exact matches excluding escape sequences. Python does in the ', m('a', {'href': 'https://pypi.python.org/pypi/regex'}, m('code', {}, 'regex')), " module. JS also doesn't have operator overloading, which makes the ", m('code', {}, 'Registry'), ' somewhat more cumbersome to deal with.'), m('p', "If JS ever did implement the regexes, then I guess there wouldn't be anything stopping someone (me, I guess) from porting this whole library to JS."), m('h3', m('a', 'I want to use a different view library...')), m('p', 'Yeah, there are lots now.'), m('p', 'What you have to do is write a function similar to ', m('code', {}, 'render_mithril'), ' in the ', m('code', {}, 'codegen.py'), ' file. If necessary, you can also write a function similar to ', m('code', {}, 'render_mithril_component'), ' which spits out a full component (with the ', m('code', {}, 'var ComponentName = ...'), '). Finally, add a case to ', m('code', {}, '__main__.py'), ' that renders your language.'), m('h2', m('a', 'Legal')), m('p', "Licensed under the GPL. I don't speak legalese, so let me go ahead and include the spirit of what I want:"), m('ul', m('li', 'If you improve the ', m('strong', {}, 'parser'), ' or the ', m('strong', {}, 'library'), ' of ', m('code', {}, 'Element'), "s, I'd like that to be open source under GPL. Basically since I provided those things to you, I'd like you to provide your work back to the world. This includes:", m('ul', m('li', 'improving the basic parser ', m('code', {}, 'Element'), 's (elements, parser, codegen, registry, main file).'), m('li', 'improving the ', m('code', {}, 'Element'), 's in the library.py file.'))), m('li', 'If you write ', m('strong', {}, 'your own ', m('code', {}, 'Element'), ' or ', m('code', {}, 'Registry')), ", that's your buisness. You can keep that to yourself, although it would be ", m('em', {}, 'nice'), ' if you put it up for all of us to enjoy!')), m('p', 'The html.py file is a port of ', m('a', {'href': 'https://github.com/nosamanuel/cottonmouth'}, 'cottonmouth'), ', which I ported to python3 and improved a bit by adding ability to define the style attribute as a dictionary.'));
    }
  };
  
