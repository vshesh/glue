# A Tour of the `Standard` Registry

This document is a primer for how to use *GLUE*, and also a tour of the various components that come prebundled in the `library.py` file.

If you're interested in reading about how to *write* glue components, as opposed to how to use them, then go look at ["Anatomy of a Component"](/examples/anatomy_of_a_component) and ["A History of the Standard Registry"](/examples/a_history_of_the_standard_registry) which describe what went into making the components that are displayed here, and teaches strategies for how you can implement your own in the simplest way possible. Hopefully it covers about 80% of the cases that you would be interested in.

## Basic Editing (see: `StandardInline` registry)

Basic editing encompasses things you'd normally like to do in any editing environment, which are things like: *bold*, _italic_, `monospace`, ~strikethrough~, __underline__ and so on.
Since these basic editing elements are used so often, there is a simple way to make each of them:

---matrix table
__*What you want*__ | __*What you type*__ | __*What you get*__
bold text | `\*text*` | *text*
italic text | `\_text\_` | _text_
monospace text  | `\`text\`` | `text`
underline text  | `\_\_text\_\_` | __text__
strikethrough text |`\~text~` | ~text~
hyperlink | `\[link](http://google.com)` | [link](http://google.com)
tooltip | `T\[text](tooltip)` | T[text](tooltip)
[critic markup](https://criticmarkup.com) insert text |`\{++inserting text++}` | {++inserting text++}
[critic markup](https://criticmarkup.com) delete text | `\{--deleting text--}` | {--deleting text--}
[critic markup](https://criticmarkup.com) highlight text | `\{==highlighted text==}` | {==highlighted text==}
[critic markup](https://criticmarkup.com) replace text | `\{\~\~old\~>new\~\~} text` | {~~old~>new~~} text
header (more `\#` gives smaller header)| `\#header`, `\##header`, `\###header`, so on | #header
inline image | `!!\[image](http://lorempixel.com/50/50)` | !![image](http://lorempixel.com/50/50)
...

### A note about escapes (when you want a literal character)

Sometimes you really want an actual asterisk, as opposed to a bold element. What do you do then? Type `\\\*` in your document, like so: \*. This will make a literal asterisk in the final result. Putting a backslash in front of any character will cause it to lose any special meaning it has.

The same principle applies to literal underscores (`\\\_`), tildes (`\\\~`), and backticks (`\\\``). And, of course, backslashes themselves (`\\\\`).

You may also want a literal bold asterisk. To make one, type `\*\\\*\*` in the document (an escaped asterisk inside two asterisks to make it bold). It renders like this: *\** versus \*. This isn't a special case, but since it can be a bit confusing, I've left it here.

Another option is that you may want to escape a link, for example, to explain to someone how to make a link! To do this, prefix the link with `\\`, like so: `\\\[link](google.com)` -> \[link](google.com). The `[` character loses its special meaning so the link is not processed.

## Environments (basic blocks)

## Media (audio, video etc)

## Standalone Blocks (integrations with other plain-texts)

### Specialty Blocks: Music!

## Custom Components (using your own stuff)

## Top Level Blocks (tying it all together)

---code python
def Bold:
def Italic:
def Monospace:
def Underline:
def Strikethrough:
def CriticAdd:
def CriticDel:
def CriticHighlight:

def CriticComment:
def FullImage(groups):
def Pictogram(groups):

def Blockquote(text: str):
def List(text, o:bool=False):
def SideBySide(text):
def Matrix(text, type='flex'):

def Audio(group):
def Figure(text, caption=''):

def Katex(text, docid, elem):
def Code(text, language='python'):
def AnnotatedCode(text, language='python', comment='#'):

def YamlComponent(text, name):
def JsonComponent(text, name):


def GuitarChord(text, docid, elem):
def MusicalAbc(text, docid, elem):


def NoopBlock(text):
def Paragraphs(text):
...
